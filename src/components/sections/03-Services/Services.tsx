"use client";

import React, { useEffect, useRef } from 'react';
import Image from 'next/image';
import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

gsap.registerPlugin(ScrollTrigger);

const Services: React.FC = () => {
  const containerRef = useRef<HTMLDivElement | null>(null);
  const sectionRef = useRef<HTMLElement | null>(null);
  const titleRef = useRef<HTMLHeadingElement | null>(null);
  const word1Ref = useRef<HTMLSpanElement | null>(null);
  const word2Ref = useRef<HTMLSpanElement | null>(null);
  const cardsContainerRef = useRef<HTMLDivElement | null>(null);
  const cardsRefs = useRef<(HTMLDivElement | null)[]>([]);

  useEffect(() => {
    if (!containerRef.current || !titleRef.current || !word1Ref.current || !word2Ref.current || !cardsContainerRef.current || !sectionRef.current) return;

    const ctx = gsap.context(() => {
      // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è
      gsap.set(sectionRef.current, { opacity: 0, background: 'transparent' });
      gsap.to(sectionRef.current, {
        opacity: 1,
        scrollTrigger: {
          trigger: "body",
          start: "180vh",
          end: "200vh",
          toggleActions: "play none none reverse"
        }
      });

      // Flip-–∞–Ω–∏–º–∞—Ü–∏—è —Å–ª–æ–≤
      const prepareFlip = (el: HTMLElement, className: string) => {
        const text = el.innerText;
        el.innerHTML = text
          .split("")
          .map((char) =>
            char === " "
              ? "&nbsp;"
              : `<span class="${className} inline-block" style="transform: rotateX(-90deg); opacity:0">${char}</span>`
          )
          .join("");
      };

      prepareFlip(word1Ref.current!, "flip-char-services-1");
      prepareFlip(word2Ref.current!, "flip-char-services-2");

      const flipChars1 = gsap.utils.toArray<HTMLSpanElement>(".flip-char-services-1");
      const flipChars2 = gsap.utils.toArray<HTMLSpanElement>(".flip-char-services-2");

      // ‚úÖ FLIP-–ê–ù–ò–ú–ê–¶–ò–Ø –° –ü–†–û–ì–†–ï–°–°–ò–ï–ô –°–ö–†–û–õ–õ–ê
      gsap.timeline({
        scrollTrigger: {
          trigger: "body",
          start: "950vh", // –ï—â–µ –Ω–∞ 150vh –ø–æ–∑–∂–µ (–±—ã–ª–æ 800vh)
          end: "1150vh", // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Å–¥–≤–∏–≥–∞–µ–º
          scrub: 1.5 // –£–º–µ–Ω—å—à–∞—é - —É–±–∏—Ä–∞—é –∏–Ω–µ—Ä—Ü–∏—é
        }
      })
      .to([...flipChars1, ...flipChars2], {
        rotateX: 0,
        opacity: 1,
        stagger: 0.05,
        ease: "back.out(1.7)",
        overwrite: "auto" // –£–±–∏—Ä–∞—é –∏–Ω–µ—Ä—Ü–∏—é –∫–∞–∫ –≤ About
        // –£–±–∏—Ä–∞—é duration - –ø—É—Å—Ç—å scrub –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç
      });

      // ‚úÖ –†–ê–ó–™–ï–ó–î –° –ü–†–û–ì–†–ï–°–°–ò–ï–ô –°–ö–†–û–õ–õ–ê
      gsap.timeline({
        scrollTrigger: {
          trigger: "body",
          start: "1100vh", // –°–¥–≤–∏–≥–∞—é –ø–æ–∑–∂–µ - –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Flip (–±—ã–ª–æ 950vh)
          end: "1400vh", // –î–∏–∞–ø–∞–∑–æ–Ω 300vh - –æ—á–µ–Ω—å –ø–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
          scrub: 1 // –£–º–µ–Ω—å—à–∞—é –µ—â–µ –±–æ–ª—å—à–µ - –∫–∞–∫ –≤ About
        }
      })
      .to([word1Ref.current, word2Ref.current], {
        x: (i) => i === 0 ? -800 : 800, // –ë–æ–ª—å—à–µ —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        opacity: 0, // –ò—Å—á–µ–∑–∞—é—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        ease: "power2.out",
        stagger: 0, // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ - –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
        overwrite: "auto" // –£–±–∏—Ä–∞—é –∏–Ω–µ—Ä—Ü–∏—é –∫–∞–∫ –≤ About
        // –£–±–∏—Ä–∞—é duration - –ø—É—Å—Ç—å scrub –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç
      });

      // ‚úÖ –ö–ê–†–¢–û–ß–ö–ò –° –ü–†–û–ì–†–ï–°–°–ò–ï–ô –°–ö–†–û–õ–õ–ê
      cardsRefs.current.filter(Boolean).forEach((card, index) => {
        if (card) gsap.set(card, { opacity: 0, scale: 0.3, y: 50, rotation: -5, visibility: 'hidden' });
      });

      // –ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å —Ä–∞–∑—ä–µ–∑–¥–æ–º
      const cardsTimeline = gsap.timeline({
        scrollTrigger: {
          trigger: "body",
          start: "1101vh", // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å —Ä–∞–∑—ä–µ–∑–¥–æ–º (–±—ã–ª–æ 951vh)
          end: "1200vh", // –£–º–µ–Ω—å—à–∞—é –¥–∏–∞–ø–∞–∑–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫ (–±—ã–ª–æ 1050vh)
          scrub: 1 // –£–º–µ–Ω—å—à–∞—é scrub - –∫–∞–∫ —É —Ä–∞–∑—ä–µ–∑–¥–∞
        }
      });

      cardsTimeline.fromTo(
        cardsRefs.current.filter(Boolean),
        { opacity: 0, scale: 0.3, y: 50, rotation: -5, visibility: 'hidden', pointerEvents: 'none' },
        {
          opacity: 1,
          scale: 1,
          y: 0,
          rotation: 0,
          visibility: 'visible',
          pointerEvents: 'auto',
          ease: "power3.out",
          stagger: 0.05,
          overwrite: "auto" // –£–±–∏—Ä–∞—é –∏–Ω–µ—Ä—Ü–∏—é –∫–∞–∫ –≤ About
          // –£–±–∏—Ä–∞—é duration - –ø—É—Å—Ç—å scrub –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç
        }
      );

      // ‚úÖ –ü–û–î–ó–ê–ì–û–õ–û–í–û–ö –° –ü–†–û–ì–†–ï–°–°–ò–ï–ô –°–ö–†–û–õ–õ–ê
      const servicesText = document.querySelector('.text-container p');
      if (servicesText) {
        gsap.set(servicesText, { opacity: 0 });
        
        gsap.to(servicesText, {
          opacity: 1,
          ease: "power2.out",
          overwrite: "auto", // –£–±–∏—Ä–∞—é –∏–Ω–µ—Ä—Ü–∏—é –∫–∞–∫ –≤ About
          scrollTrigger: {
            trigger: "body",
            start: "1200vh", // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ (–±—ã–ª–æ 1050vh)
            end: "1250vh", // –£–≤–µ–ª–∏—á–∏–≤–∞—é –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
            scrub: 1.5 // –£–º–µ–Ω—å—à–∞—é - —É–±–∏—Ä–∞—é –∏–Ω–µ—Ä—Ü–∏—é
          }
          // –£–±–∏—Ä–∞—é duration - –ø—É—Å—Ç—å scrub –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç
        });
      }



      // ‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø –ò–°–ß–ï–ó–ù–û–í–ï–ù–ò–Ø Services –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const servicesContent = [titleRef.current, servicesText].filter(Boolean); // –£–±–∏—Ä–∞–µ–º cardsContainerRef –∏–∑ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
      
      gsap.fromTo(servicesContent, 
        // FROM —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        {
          y: 0,
          opacity: 1, 
          scale: 1,
          filter: "blur(0px)"
        },
        // TO —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —Å –ø—Ä–µ–º–∏—É–º —Ä–∞–∑–º—ã—Ç–∏–µ–º)
        {
          y: -120, // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ Hero –∏ About –∫–æ–Ω—Ç–µ–Ω—Ç—É
          opacity: 0,
          scale: 0.9, // –õ–µ–≥–∫–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø—Ä–∏ —É–µ–∑–¥–µ
          filter: "blur(15px)", // –£—Å–∏–ª–µ–Ω–Ω—ã–π blur —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–µ—Ä–µ—Ö–æ–¥–∞
          ease: "power2.in", // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏ —É–µ–∑–¥–µ –≤–≤–µ—Ä—Ö
          stagger: 0.05, // –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          overwrite: "auto",
          scrollTrigger: {
            trigger: "body",
            start: "1250vh", // –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π –ø–æ—è–≤–ª–µ–Ω–∏—è
            end: "1450vh", // –ê–ë–°–û–õ–Æ–¢–ù–û–ï - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
            scrub: 2.0, // –ë–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–µ–º–∏—É–º —ç—Ñ—Ñ–µ–∫—Ç–∞
            markers: false,
            invalidateOnRefresh: true,
            // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ–º —Å–∫—Ä–æ–ª–ª–µ
            onUpdate: (self) => {
              if (self.progress === 0) {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –Ω–∞—á–∞–ª—É
                gsap.set(servicesContent, {
                  y: 0,
                  opacity: 1,
                  scale: 1,
                  filter: "blur(0px)"
                });
              }
            }
          }
        }
      );

    }, containerRef);

    return () => ctx.revert();
  }, []);

  const services = [
    {
      id: 1,
      title: '–¢–ï–†–ê–ü–ò–Ø',
      icon: 'üè•',
      bgColor: 'bg-gradient-to-br from-rose-500 to-pink-600'
    },
    {
      id: 2,
      title: '–•–ò–†–£–†–ì–ò–Ø',
      icon: 'üî™',
      bgColor: 'bg-gradient-to-br from-blue-500 to-indigo-600'
    },
    {
      id: 3,
      title: '–î–ï–†–ú–ê–¢–û–õ–û–ì–ò–Ø',
      icon: 'ü¶†',
      bgColor: 'bg-gradient-to-br from-green-500 to-emerald-600'
    },
    {
      id: 4,
      title: '–°–¢–ê–¶–ò–û–ù–ê–†',
      icon: 'üè®',
      bgColor: 'bg-gradient-to-br from-purple-500 to-violet-600'
    },
    {
      id: 5,
      title: '–ü–†–ò–ï–ú –ò –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø',
      icon: 'üë®‚Äç‚öïÔ∏è',
      bgColor: 'bg-gradient-to-br from-amber-500 to-orange-600'
    },
    {
      id: 6,
      title: '–≠–ù–î–û–°–ö–û–ü–ò–Ø',
      icon: 'üî¨',
      bgColor: 'bg-gradient-to-br from-cyan-500 to-teal-600'
    },
    {
      id: 7,
      title: '–†–ï–ê–ë–ò–õ–ò–¢–ê–¶–ò–Ø',
      icon: 'üèÉ‚Äç‚ôÇÔ∏è',
      bgColor: 'bg-gradient-to-br from-lime-500 to-green-600'
    },
    {
      id: 8,
      title: '–û–ù–õ–ê–ô–ù –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø –í–ï–¢–ï–†–ò–ù–ê–†–ù–û–ì–û –í–†–ê–ß–ê',
      icon: 'üíª',
      bgColor: 'bg-gradient-to-br from-sky-500 to-blue-600'
    },
    {
      id: 9,
      title: '–°–¢–û–ú–ê–¢–û–õ–û–ì–ò–Ø',
      icon: 'ü¶∑',
      bgColor: 'bg-gradient-to-br from-slate-500 to-gray-600'
    },
    {
      id: 10,
      title: '–ù–ï–ô–†–û–•–ò–†–£–†–ì–ò–Ø',
      icon: 'üß†',
      bgColor: 'bg-gradient-to-br from-fuchsia-500 to-pink-600'
    }
  ];

  return (
    <section 
      ref={sectionRef}
      className="min-h-screen w-full flex items-center justify-center"
      style={{
        background: 'transparent'
      }}
    >
      <div 
        ref={containerRef}
        className="w-full max-w-[1440px] mx-auto py-8 sm:py-12 md:py-16 border-2 border-dashed border-red-500 container-type-inline"
        style={{
          paddingInline: 'var(--container-padding)',
        }}
      >
        {/* –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
        <div 
          className="relative w-full mx-auto border-2 border-dashed border-blue-500 mb-8 md:mb-12"
          style={{
            minHeight: 'fit-content',
            overflow: 'visible'
          }}
        >
          {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏ */}
          <div className="text-center absolute top-0 left-0 right-0 z-10" style={{ padding: '60px 20px 0' }}>
            <h2 
              ref={titleRef}
              className="font-black text-white leading-none tracking-tight font-inter m-0 p-0"
              style={{
                fontSize: "var(--about-h2-size)",
                marginBottom: "var(--hero-spacing-h2)",
              }}
            >
              {/* ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û - –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ù–¢–ï–ô–ù–ï–†–´ –î–õ–Ø –†–ê–ó–™–ï–ó–î–ê */}
              <span 
                ref={word1Ref} 
                className="word-container border-2 border-dashed border-purple-500 m-0 p-0"
                style={{
                  display: 'inline-block',
                  transformOrigin: 'center center'
                }}
              >
                –ù–∞—à–∏
              </span>{' '}
              <span 
                ref={word2Ref} 
                className="word-container border-2 border-dashed border-purple-500 m-0 p-0"
                style={{
                  display: 'inline-block',
                  transformOrigin: 'center center'
                }}
              >
                —É—Å–ª—É–≥–∏
              </span>
            </h2>
          </div>

          {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ */}
          <div 
            ref={cardsContainerRef}
            className="w-full border-2 border-dashed border-green-500 container-type-inline"
            style={{
              padding: '60px 20px',
              overflow: 'visible',
            }}
          >
          {/* –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ —Å CSS Grid + auto-fit - 5 –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Ä—è–¥ */}
          <div 
            className="grid justify-items-center w-full max-w-full"
            style={{
              gap: 'var(--service-card-gap)',
              gridTemplateColumns: 'repeat(5, 1fr)'
            }}
          >
            {services.map((service, index) => (
              <div 
                key={service.id}
                ref={(el) => {
                  cardsRefs.current[index] = el;
                }}
                className={`w-full flex flex-col items-center justify-center cursor-pointer overflow-hidden focus-visible:outline-2 focus-visible:outline-blue-500 service-card-${service.id}`}
                onMouseEnter={(e) => {
                  const card = e.currentTarget;
                  const icon = card.querySelector('img'); // –ù–∞—Ö–æ–¥–∏–º –∏–∫–æ–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
                  
                  // –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ ID —á–µ—Ä–µ–∑ GSAP
                  const colors = {
                    1: 'linear-gradient(to bottom right, rgb(34, 211, 238), rgb(8, 145, 178))', // –¢–ï–†–ê–ü–ò–Ø
                    2: 'linear-gradient(to bottom right, rgb(34, 211, 238), rgb(8, 145, 178))', // –•–ò–†–£–†–ì–ò–Ø
                    3: 'linear-gradient(to bottom right, rgb(34, 211, 238), rgb(8, 145, 178))', // –î–ï–†–ú–ê–¢–û–õ–û–ì–ò–Ø
                    4: 'linear-gradient(to bottom right, rgb(34, 211, 238), rgb(8, 145, 178))', // –°–¢–ê–¶–ò–û–ù–ê–†
                    5: 'linear-gradient(to bottom right, rgb(34, 211, 238), rgb(8, 145, 178))', // –ü–†–ò–ï–ú
                    6: 'linear-gradient(to bottom right, rgb(34, 211, 238), rgb(8, 145, 178))', // –≠–ù–î–û–°–ö–û–ü–ò–Ø - –∞–∫–≤–∞ —Å –±–µ–ª—ã–º
                    7: 'linear-gradient(to bottom right, rgb(34, 211, 238), rgb(8, 145, 178))', // –†–ï–ê–ë–ò–õ–ò–¢–ê–¶–ò–Ø
                    8: 'linear-gradient(to bottom right, rgb(34, 211, 238), rgb(8, 145, 178))', // –û–ù–õ–ê–ô–ù
                    9: 'linear-gradient(to bottom right, rgb(34, 211, 238), rgb(8, 145, 178))', // –°–¢–û–ú–ê–¢–û–õ–û–ì–ò–Ø
                    10: 'linear-gradient(to bottom right, rgb(34, 211, 238), rgb(8, 145, 178))' // –ù–ï–ô–†–û–•–ò–†–£–†–ì–ò–Ø
                  };
                  
                  // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç)
                  gsap.to(card, {
                    background: colors[service.id as keyof typeof colors],
                    duration: 0.3,
                    ease: "power2.out"
                  });
                  
                  // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ + –ø–æ–≤–æ—Ä–æ—Ç)
                  if (icon) {
                    gsap.to(icon, {
                      scale: 1.3, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
                      rotation: 15, // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–ø—Ä–∞–≤–æ –Ω–∞ 15 –≥—Ä–∞–¥—É—Å–æ–≤
                      duration: 0.3,
                      ease: "power2.out"
                    });
                  }
                }}
                onMouseLeave={(e) => {
                  const card = e.currentTarget;
                  const icon = card.querySelector('img'); // –ù–∞—Ö–æ–¥–∏–º –∏–∫–æ–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
                  
                  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                  gsap.to(card, {
                    background: 'transparent',
                    duration: 0.3,
                    ease: "power2.out"
                  });
                  
                  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∫–æ–Ω–∫—É –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                  if (icon) {
                    gsap.to(icon, {
                      scale: 1, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
                      rotation: 0, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –ø–æ–≤–æ—Ä–æ—Ç—É
                      duration: 0.3,
                      ease: "power2.out"
                    });
                  }
                }}
                style={{
                  height: 'var(--service-card-size)',
                  aspectRatio: '1',
                  borderRadius: 'var(--content-border-radius)',
                  // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–∫—Ä—ã—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ CSS
                  opacity: 0,
                  transform: 'scale(0.3) rotate(-5deg)',
                  visibility: 'hidden'
                }}
                tabIndex={0}
                role="button"
                aria-label={`–£—Å–ª—É–≥–∞: ${service.title}`}
              >
                <div className="text-center p-6">
                  <div className="mb-4 flex justify-center">
                    <Image
                      src={`/icon uslugi/${service.id}.png`}
                      alt={`–ò–∫–æ–Ω–∫–∞ —É—Å–ª—É–≥–∏: ${service.title}`}
                      width={64}
                      height={64}
                      className="w-16 h-16 object-contain"
                    />
                  </div>
                  <h4 className="text-lg font-semibold text-white font-inter text-center">
                    {service.title}
                  </h4>
                </div>
              </div>
            ))}
          </div>
          </div>
        </div>
        
        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å Container Queries –¥–ª—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏ */}
        <div 
          className="w-full max-w-[900px] mx-auto border-2 border-dashed border-blue-500 -mt-8"
          style={{
            paddingTop: '20px',
          }}
        >
          <div className="text-container text-center">
            <p 
              className="text-white font-semibold font-inter leading-relaxed"
              style={{
                fontSize: "var(--about-text-size)",
                marginBottom: "var(--about-spacing-text)",
              }}
            >
              –í—Å–µ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–æ–≤—ã—Ö –º–µ—Ç–æ–¥–∏–∫ –ª–µ—á–µ–Ω–∏—è.
            </p>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Services;
